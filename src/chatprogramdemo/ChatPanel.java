/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatprogramdemo;

/**
 *
 * @author anh
 */
import java.net.Socket;
import java.io.*;
import static java.lang.Thread.sleep;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

public class ChatPanel extends javax.swing.JPanel implements Runnable {

    Socket socket = null;
    BufferedReader buff = null;
    DataOutputStream out = null;
    OutputThread thread = null;
    String sender;
    String receiver;
    PrintWriter print;
    boolean terminate = false;
    boolean setFileStatus = false;
    Thread t;

    /**
     * Creates new form ChatPanel
     */
    public ChatPanel() {
    }

    public ChatPanel(Socket s, String sender, String receiver) {
        initComponents();
        socket = s;
        this.sender = sender;
        this.receiver = receiver;
        this.txtSentMessage.setEditable(false);
        try {
            //Input buffer and output buffer
            buff = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            out = new DataOutputStream(socket.getOutputStream());
            print = new PrintWriter(out);
            thread = new OutputThread(s, txtSentMessage, sender, receiver);
            thread.start();
        } catch (Exception e) {
//            e.printStackTrace();
        }
        t = new Thread(this);
        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtTypingMessage = new javax.swing.JTextArea();
        btnSend = new javax.swing.JButton();
        btnSendFile = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtSentMessage = new javax.swing.JTextArea();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Message", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 0, 255))); // NOI18N

        txtTypingMessage.setColumns(20);
        txtTypingMessage.setRows(5);
        jScrollPane3.setViewportView(txtTypingMessage);

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        btnSendFile.setText("Add file");
        btnSendFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSend, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                    .addComponent(btnSendFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(btnSendFile, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtSentMessage.setColumns(20);
        txtSentMessage.setRows(5);
        jScrollPane1.setViewportView(txtSentMessage);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        // TODO add your handling code here:
        if (txtTypingMessage.getText().trim().length() == 0) {
            return;
        }
        try {
            out.writeBytes(txtTypingMessage.getText());
            out.write(13);
            out.write(10);
            out.flush();
            this.txtSentMessage.append("\n" + sender + ": " + txtTypingMessage.getText());
            txtTypingMessage.setText("");
            txtTypingMessage.requestFocus(true);
        } catch (Exception e) {
//            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSendActionPerformed

    private void btnSendFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendFileActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("Text File", "txt"));
        int returnval = fc.showOpenDialog(ChatPanel.this);
        if (returnval == JFileChooser.APPROVE_OPTION) {
            FileInputStream fileInput = null;
            try {
                File file = fc.getSelectedFile();
                //This is where a real application would open the file.
                fileInput = new FileInputStream(file);
                BufferedReader read = new BufferedReader(new FileReader(file));
                String line, send = "";
                while ((line = read.readLine()) != null) {
                    send += line + "-";
                }
                out.writeBytes("@fiLE");
                out.writeBytes(send);
                out.write(13);
                out.write(10);
                out.flush();
                if (thread.sendFileStatus) {
                    this.txtSentMessage.append("\nFile has been sent");
                }
            } catch (Exception ex) {
                System.out.println("There's something wrong with the file");
            } finally {
                try {
                    fileInput.close();
                } catch (IOException ex) {
                    System.out.println("Can't close file");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "File transfer canceled");
        }

    }//GEN-LAST:event_btnSendFileActionPerformed

    public JTextArea getTxtSentText() {
        return this.txtSentMessage;
    }

    public boolean getTerminated() {
        return terminate;
    }

    public void setText(String text) {
        this.txtTypingMessage.setText(text);
        btnSendActionPerformed(null);
        this.txtTypingMessage.setText("BYE");
        btnSendActionPerformed(null);
    }

    public void setDisable() {
        this.jPanel2.setVisible(false);

    }

    public void setEnable() {
        this.txtTypingMessage.setEditable(true);
        this.btnSend.setEnabled(true);
        this.btnSendFile.setEnabled(true);
    }

    public void setTerminate(boolean terminate) {
        thread.terminate = terminate;
    }

    @Override
    public void run() {
        while (true) {
            try {
                terminate = thread.terminate;
                setFileStatus = thread.sendFileStatus;
                Thread.sleep(500);
            } catch (InterruptedException ex) {
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSend;
    private javax.swing.JButton btnSendFile;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea txtSentMessage;
    private javax.swing.JTextArea txtTypingMessage;
    // End of variables declaration//GEN-END:variables
}

class OutputThread extends Thread {

    Socket socket;
    JTextArea txt;
    BufferedReader buff;
    String send;
    String receive;
    boolean terminate = false;
    boolean sendFileStatus = false;
    Thread thread;

    public OutputThread(Socket socket, JTextArea txt, String send, String receive) {
        super();
        this.socket = socket;
        this.txt = txt;
        this.send = send;
        this.receive = receive;
        try {
            buff = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Network error");
            System.exit(0);
        }
    }

    /**
     * we need to get data from input stream periodically cause we don't know
     * when the message come in future
     */
    @Override
    public void run() {
        while (true) {
            try {
                if (socket != null) {
                    String mess = "";
                    if ((mess = buff.readLine()) != null && mess.length() > 0) {
                        if (mess.length() > 5 && mess.substring(0, 5).equals("@fiLE")) {
                            saveFile(mess.substring(5));
                            if (sendFileStatus) {
                                txt.append("\nFile has been saved");
                            }
                        } else if (mess.equals("BYE")) {
                            terminate = true;
                        } else {
                            txt.append("\n" + receive + ": " + mess);
                        }
                    }
                }
                sleep(1000);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Manager has terminated his program");
                break;
            }
        }
    }

    public void saveFile(final String mess) throws IOException {
        thread = new Thread(new Runnable() {

            @Override
            public void run() {
                String data[] = mess.split("-");
                JFileChooser fc = new JFileChooser();
                int returnval = fc.showSaveDialog(null);
                if (returnval == JFileChooser.APPROVE_OPTION) {
                    sendFileStatus = true;
                    PrintWriter write = null;
                    try {
                        write = new PrintWriter(new FileWriter(fc.getSelectedFile() + ".txt"));
                        for (int i = 0; i < data.length; i++) {
                            write.append(data[i]);
                            write.println();
                        }
                    } catch (IOException ex) {

                    } finally {
                        write.close();
                    }
                } else {
                    sendFileStatus = false;
                    JOptionPane.showMessageDialog(null, "File transfer canceled");
                }
            }
        });
        thread.start();

    }

}
